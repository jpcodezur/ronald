<?phpnamespace Admin\MisClases;use Zend\Mvc\MvcEvent;use Zend\EventManager\EventManagerInterface;use Zend\EventManager\ListenerAggregateInterface;use Zend\Permissions\Acl\Acl;use Zend\Permissions\Acl\Role\GenericRole as Role;use Zend\Permissions\Acl\Resource\GenericResource as Resource;class AclListener implements ListenerAggregateInterface{        protected $listener = array();    public $acl;    public $role;    public function attach(EventManagerInterface $events) {        $this->listener[] = $events->attach(MvcEvent::EVENT_DISPATCH,array($this,        'onDispatch'),100);    }        public function detach(EventManagerInterface $events) {        foreach($this->listener as $index => $listener){            if($events->detach($listener)){                unset($this->listener[$index]);            }        }    }        public function onDispatch(MvcEvent $e) {        $acl = new Acl();        $acl->addRole(new Role('admin_sistema'))            ->addRole(new Role('admin'))            ->addRole(new Role('suvervisor'))            ->addRole(new Role('agente'));        $acl            ->addResource(new Resource('application:index'))            ->addResource(new Resource('application:masonry'))            ->addResource(new Resource('login:index'))            ->addResource(new Resource('login:login'))            ->addResource(new Resource('login:logout'))            ->addResource(new Resource('admin:index'))            ->addResource(new Resource('admin:alerta'))            ->addResource(new Resource('admin:mensaje'))            ->addResource(new Resource('admin:login'))            ->addResource(new Resource('admin:usuario'))            ->addResource(new Resource('admin:pagina'))            ->addResource(new Resource('admin:input'))            ->addResource(new Resource('admin:formulario_edit'))            ->addResource(new Resource('admin:pregunta'))            ->addResource(new Resource('admin:respuesta'))            ->addResource(new Resource('admin:formulario'))            ->allow('admin')            ->allow('agente',array(                'application:index',                'admin:index',                'admin:formulario',                'admin:alerta',                'admin:mensaje',                'admin:login',                'admin:respuesta',                'login:index',                'login:login',                'login:logout'),                    array('index','product','wizard','msgs','resparent','adds','add','actualizospan','masonry'))            ->deny('admin',array('admin:index','admin:formulario'),array('list','add','wizard'));        $application = $e->getApplication();        $services = $application->getServiceManager();        $services->setService('AclService', $acl);        $matches = $e->getRouteMatch();        $controllerClass = $matches->getParam('controller');        $controllerArray = explode("\\", $controllerClass);        $module = strtolower($controllerArray[0]);        $controller = strtolower($controllerArray[2]);        $action = $matches->getParam('action');        $resourceName = $module . ':' . $controller;        $role = $this->getRole($services);        if (!$acl->isAllowed($role, $resourceName, $action)) {            $matches->setParam('controller', 'Admin\Controller\Login');        }        $this->sendToLayout($e,$acl,$role);    }        private function sendToLayout($e,$acl,$role){        $viewModel = $e->getApplication()->getMvcEvent()->getViewModel();        $viewModel->acl = $acl;        $viewModel->role = $role;    }    private function getRole($sm) {        $auth = $sm->get('Admin\Model\Login');        $role = "agente";                if ($auth->isLoggedIn()) {            $usuario = $_SESSION["miSession"]["usuario"];            switch ($usuario->getTipo()) {                case 1:                    $role = "admin_sistema";                    break;                case 2:                    $role = "admin";                    break;                case 3:                    $role = "suvervisor";                    break;                case 4:                    $role = "agente";                    break;                default:                    break;            }        }        return $role;    }    }