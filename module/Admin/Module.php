<?php/** * Zend Framework (http://framework.zend.com/) * * @link      http://github.com/zendframework/ZendSkeletonModule for the canonical source repository * @copyright Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com) * @license   http://framework.zend.com/license/new-bsd New BSD License */namespace Admin;use Zend\ModuleManager\Feature\AutoloaderProviderInterface;use Zend\Mvc\ModuleRouteListener;use Zend\ModuleManager\Feature\ServiceProviderInterface;use Zend\Db\ResultSet\ResultSet;use Zend\Db\Adapter\Adapter;use Zend\Db\TableGateway\TableGateway;use Zend\ModuleManager\Feature\ConfigProviderInterface;use Zend\ModuleManager\Feature\ControllerProviderInterface;use Zend\ModuleManager\ModuleManager;use Zend\Mvc\MvcEvent;use Admin\MisClases\AclListener;class Module implements AutoloaderProviderInterface, ServiceProviderInterface, ConfigProviderInterface, ControllerProviderInterface {    public function init(ModuleManager $moduleManager) {                $events = $moduleManager->getEventManager();        $sharedEvents = $events->getSharedManager();        $sharedEvents->attach(__NAMESPACE__, 'dispatch', array($this, 'initAuth'), 100);    }    /*      public function initAlerts(MvcEvent $e) {      $application = $e->getApplication();      } */    public function initAuth(MvcEvent $e) {        $application = $e->getApplication();        $matches = $e->getRouteMatch();        $controller = $matches->getParam("controller");        $action = $matches->getParam("action");        /*echo "<pre>";        print_r($_SERVER);        die();*/                /*if(isset($_SERVER["REDIRECT_URL"])){            if(strpos($_SERVER["REDIRECT_URL"], "application")){                return;            }        }*/                if ($controller === "Admin\Controller\Login" && in_array($action, array('index', 'autenticar'))) {            return;        }        $sm = $application->getServiceManager();        $auth = $sm->get('Admin\Model\Login');        if (!$auth->isLoggedIn()) {            $controller = $e->getTarget();            return $controller->redirect()->toRoute('admin', array('controller' => 'login'));        }    }    public function getAutoloaderConfig() {        return array(            'Zend\Loader\ClassMapAutoloader' => array(                __DIR__ . '/autoload_classmap.php',            ),            'Zend\Loader\StandardAutoloader' => array(                'namespaces' => array(                    // if we're in a namespace deeper than one level we need to fix the \ in the path                    __NAMESPACE__ => __DIR__ . '/src/' . str_replace('\\', '/', __NAMESPACE__),                ),            ),        );    }    public function getConfig() {        return include __DIR__ . '/config/module.config.php';    }    public function onBootstrap($e) {                $eventManager = $e->getApplication()->getEventManager();                $moduleRouteListener = new ModuleRouteListener();                $moduleRouteListener->attach($eventManager);                $aclListener = new AclListener();                $aclListener->attach($eventManager);    }    public function getServiceConfig() {        return array(            'factories' => array(                #Adapter                'db' => function ($sm) {                    $config = $sm->get("config");                    $config = $config["db"];                    $dbAdapter = new Adapter($config);                    return $dbAdapter;                },                #EntidadDao                'UsuarioDao' => function($sm) {                    return $this->getEntidadDao($sm, "UsuarioTableGateway", "Admin\Model\Dao\UsuarioDao");                },                #TableGAteways                'UsuarioTableGateway' => function ($sm) {                    $result = $this->getTableGateway($sm, "Admin\Model\Entity\Usuario");                    return new TableGateway('usuarios', $result["dbAdapter"], null, $result["resultSetPrototype"]);                },                #Login                'Admin\Model\Login' => function ($sm) {                    $dbAdapter = $sm->get('db');                    return new \Admin\Model\Login($dbAdapter);                },            //Plugins            ),        );    }    public function getControllerConfig() {        return array(            'initializers' => array(                'Admin\Controller\Login' => function ($instance, $sm) {                    if ($instance instanceof \Admin\Controller\LoginController) {                        $locator = $sm->getServiceLocator();                        $instance->setLogin($locator->get('Admin\Model\Login'));                    }                },                'Admin\Controller\Index' => function ($instance, $sm) {                    if ($instance instanceof \Admin\Controller\IndexController) {                        $locator = $sm->getServiceLocator();                        $instance->setTableGateway($locator->get('UsuarioTableGateway'));                        $instance->setUsuarioDao($locator->get('UsuarioDao'));                    }                },                'Admin\Controller\Usuario' => function ($instance, $sm) {                    if ($instance instanceof \Admin\Controller\UsuarioController) {                        $locator = $sm->getServiceLocator();                        $config = $locator->get('ConfigIni');                        $instance->getConfig($config);                        $instance->setTableGateway($locator->get('UsuarioTableGateway'));                        $instance->setUsuarioDao($locator->get('UsuarioDao'));                        $adapter = $this->getAdapter($locator);                        $instance->setAdapter($adapter);                    }                },            )        );    }    public function getTableGateway($sm, $obj) {        $dbAdapter = $this->getAdapter($sm);        $resultSetPrototype = new ResultSet();        $arr = array();        $obj = new $obj();        foreach ($obj as $key => $value) {            $arr[$key] = $value;        }        $data = new \ArrayObject($arr);        $resultSetPrototype->setArrayObjectPrototype($data);        return array("dbAdapter" => $dbAdapter, "resultSetPrototype" => $resultSetPrototype);    }    public function getAdapter($sm) {        return $dbAdapter = $sm->get('db');    }    public function getEntidadDao($sm, $tableGateway, $entidadDao) {        $tableGateway = $sm->get($tableGateway);        $dao = new $entidadDao($tableGateway);        return $dao;    }}